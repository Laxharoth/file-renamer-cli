TODO: write filters 
✔ filter is created from converting a String into the filter @done(25-04-02 11:51)
✔ filters should read many strings and determine if each contain some explicitly provided text fragments a wildcard character can be provided @done(25-04-02 11:51)
✔ filters can return a collection of the ordened fixed texts @done(25-04-02 11:51)
✔ filters can return a collection of the ordened text catched by the wild cards @done(25-04-02 11:51)
✔ alternatively the wildcard can be a counter @done(25-04-02 11:51)
TODO: write renamer
✔ Similar to filter renamer is created from convertig a String into the renamer @done(25-04-04 10:26)
✔ the renamer will take a collection of strings "A" (fixed text) and concatenate them adding other text from a different set of text "B" (wildcard catched text) @done(25-04-04 10:26)
✔ using the wildcard will insert from B using the same relative position (using it for the first time will pick the first wildcard catched text) @done(25-04-04 10:26)
✔ the renamer should be able to select from the "B" by position requires an 'opening' and 'closing' position selector. @done(25-04-04 10:27)
✔ renamer should not actually rename files just provide an array containing the original and modified name @done(25-04-04 10:27)
✔ Check case where a wildcard is at the begining of the string @done(25-04-04 10:31)
TODO: write cli
✔ Convert arguments into an options object that will feed filters functions, renamer functions @done(25-04-02 14:32)
✔ target directory: starting path of the tool @done(25-04-02 14:33)
✔ filter_string: the string with the wildcards @done(25-04-02 14:33)
✔ wildcard_char: the character used as wildcard @done(25-04-02 14:33)
✔ renamer_string: the template used to create the renamer @done(25-04-02 14:33)
✔ position_selector_wrapper: Opening and Closing characters for renamer position selectionr (requires 2 characters exactly) @done(25-04-02 14:33)
✔ dry_run: perform a dry run, not actually rename files but output the result. @done(25-04-02 14:33)